import { useLocation } from "wouter";
import { useQuery } from "@tanstack/react-query";
import { useState, useEffect } from "react";
import { Helmet } from "react-helmet";
import { 
  Card, 
  CardContent, 
  CardHeader, 
  CardTitle,
  CardDescription
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { ArrowLeft } from "lucide-react";
import type { CutoffFilters } from "@/lib/types";

// Generate category badge colors
const getBadgeVariant = (category: string) => {
  switch(category) {
    case 'OC':
      return 'bg-blue-100 text-blue-800';
    case 'BC':
      return 'bg-green-100 text-green-800';
    case 'MBC':
      return 'bg-purple-100 text-purple-800';
    case 'SC':
      return 'bg-red-100 text-red-800';
    case 'ST':
      return 'bg-yellow-100 text-yellow-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
};

const Results = () => {
  const [location] = useLocation();
  const [filters, setFilters] = useState<CutoffFilters>({});
  
  // Parse URL query parameters
  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    
    const newFilters: CutoffFilters = {};
    
    if (params.has('minCutoff')) {
      newFilters.minCutoff = parseFloat(params.get('minCutoff')!);
    }
    
    if (params.has('categoryId') && params.get('categoryId') !== '0') {
      newFilters.categoryId = parseInt(params.get('categoryId')!);
    }
    
    if (params.has('departmentId') && params.get('departmentId') !== '0') {
      newFilters.departmentId = parseInt(params.get('departmentId')!);
    }
    
    setFilters(newFilters);
  }, [location]);
  
  // Fetch cutoff data with filters
  const { data: cutoffs = [], isLoading, error } = useQuery<any[]>({
    queryKey: ['/api/cutoffs', filters],
    staleTime: 60000, // 1 minute
    enabled: Object.keys(filters).length > 0
  });
  
  // Get category and department info for display
  const { data: categories = [] } = useQuery<any[]>({
    queryKey: ['/api/categories'],
    staleTime: 300000, // 5 minutes
  });
  
  const { data: departments = [] } = useQuery<any[]>({
    queryKey: ['/api/departments'],
    staleTime: 300000,
  });
  
  // Get filter labels for display
  const getCategoryName = (id: number | undefined) => {
    if (!id || !categories) return "All Categories";
    const category = categories.find(c => c.id === id);
    return category ? `${category.name} (${category.code})` : "All Categories";
  };
  
  const getDepartmentName = (id: number | undefined) => {
    if (!id || !departments) return "All Departments";
    const department = departments.find(d => d.id === id);
    return department ? department.name : "All Departments";
  };
  
  return (
    <>
      <Helmet>
        <title>College Recommendations | TNEA Explorer</title>
        <meta name="description" content="Personalized college recommendations based on your marks and preferences." />
      </Helmet>
      
      <div className="py-8 bg-gray-50">
        <div className="container mx-auto px-4">
          <div className="mb-6 flex items-center justify-between">
            <h1 className="text-3xl font-bold">College Recommendations</h1>
            <Button 
              variant="outline" 
              onClick={() => window.history.back()}
              className="flex items-center"
            >
              <ArrowLeft className="h-4 w-4 mr-2" /> Back
            </Button>
          </div>
          
          <Card className="mb-6">
            <CardContent className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <h3 className="text-sm font-medium text-gray-500">Your Marks</h3>
                  <p className="text-lg font-bold">{filters.minCutoff || 0}/200</p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-gray-500">Category</h3>
                  <p className="text-lg font-semibold">{getCategoryName(filters.categoryId)}</p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-gray-500">Department</h3>
                  <p className="text-lg font-semibold">{getDepartmentName(filters.departmentId)}</p>
                </div>
              </div>
            </CardContent>
          </Card>
          
          {isLoading ? (
            <Card>
              <CardContent className="p-6">
                <div className="space-y-4">
                  <Skeleton className="h-8 w-3/4" />
                  <Skeleton className="h-4 w-1/2" />
                  <div className="space-y-2">
                    {Array(5).fill(0).map((_, i) => (
                      <Skeleton key={i} className="h-12 w-full" />
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>
          ) : error ? (
            <Card className="bg-red-50 border-red-200">
              <CardContent className="p-6">
                <h3 className="font-semibold text-red-800 mb-2">Error Loading Results</h3>
                <p className="text-red-600">
                  We encountered an error while retrieving your college recommendations. Please try again.
                </p>
              </CardContent>
            </Card>
          ) : cutoffs && cutoffs.length > 0 ? (
            <Card>
              <CardHeader>
                <CardTitle>Eligible Colleges & Programs</CardTitle>
                <CardDescription>
                  {cutoffs.length} colleges found matching your criteria. Colleges are sorted by cutoff marks.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead className="w-[250px]">College</TableHead>
                        <TableHead>Department</TableHead>
                        <TableHead className="w-[100px]">Category</TableHead>
                        <TableHead className="text-right">Cutoff Mark</TableHead>
                        <TableHead className="w-[100px]">Gap</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {cutoffs.map((cutoff) => (
                        <TableRow key={cutoff.id} className="hover:bg-gray-50">
                          <TableCell className="font-medium">
                            {cutoff.collegeName}
                            <div className="text-xs text-gray-500">Code: {cutoff.collegeCode}</div>
                          </TableCell>
                          <TableCell>{cutoff.departmentName}</TableCell>
                          <TableCell>
                            <Badge 
                              variant="outline" 
                              className={getBadgeVariant(cutoff.categoryCode)}
                            >
                              {cutoff.categoryCode}
                            </Badge>
                          </TableCell>
                          <TableCell className="text-right font-medium">{cutoff.cutoffMark}</TableCell>
                          <TableCell>
                            <Badge className={
                              filters.minCutoff && filters.minCutoff - cutoff.cutoffMark >= 5 
                                ? "bg-green-100 text-green-800" 
                                : "bg-yellow-100 text-yellow-800"
                            }>
                              {filters.minCutoff 
                                ? `+${(filters.minCutoff - cutoff.cutoffMark).toFixed(2)}` 
                                : "N/A"}
                            </Badge>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              </CardContent>
            </Card>
          ) : (
            <Card>
              <CardContent className="p-8 text-center">
                <div className="mb-4">
                  <div className="inline-flex items-center justify-center w-12 h-12 rounded-full bg-yellow-100 text-yellow-600">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" className="w-6 h-6">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                    </svg>
                  </div>
                </div>
                <h3 className="text-lg font-semibold mb-2">No Results Found</h3>
                <p className="text-gray-600 mb-4">
                  We couldn't find any colleges matching your criteria. Try adjusting your marks or filters.
                </p>
                <Button onClick={() => window.history.back()}>
                  Go Back
                </Button>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </>
  );
};

export default Results;