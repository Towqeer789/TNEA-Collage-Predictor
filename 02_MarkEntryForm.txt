import { useState } from "react";
import { useLocation } from "wouter";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from "@/components/ui/select";
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from "@/components/ui/card";
import { useQuery } from "@tanstack/react-query";
import { Search } from "lucide-react";
import { Slider } from "@/components/ui/slider";

const MarkEntryForm = () => {
  // State for form values
  const [marks, setMarks] = useState<number>(180);
  const [categoryId, setCategoryId] = useState<string>("");
  const [departmentId, setDepartmentId] = useState<string>("");
  
  // Navigation
  const [, navigate] = useLocation();
  
  // Fetch categories and departments for dropdowns
  const { data: categories = [], isLoading: isLoadingCategories } = useQuery<any[]>({
    queryKey: ["/api/categories"],
    staleTime: 300000, // 5 minutes
  });
  
  const { data: departments = [], isLoading: isLoadingDepartments } = useQuery<any[]>({
    queryKey: ["/api/departments"],
    staleTime: 300000, // 5 minutes
  });
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Build the query parameters
    const params = new URLSearchParams();
    params.append("minCutoff", marks.toString());
    
    if (categoryId) {
      params.append("categoryId", categoryId);
    }
    
    if (departmentId) {
      params.append("departmentId", departmentId);
    }
    
    // Navigate to results page with query parameters
    navigate(`/results?${params.toString()}`);
  };
  
  return (
    <Card className="w-full max-w-xl mx-auto">
      <CardHeader>
        <CardTitle className="text-xl font-bold text-center">Find Colleges Based on Your Marks</CardTitle>
        <CardDescription className="text-center">
          Enter your marks and preferences to discover engineering colleges you're eligible for
        </CardDescription>
      </CardHeader>
      
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-2">
            <label className="text-sm font-medium">
              Your Marks: {marks}/200
            </label>
            <Slider
              value={[marks]}
              min={0}
              max={200}
              step={1}
              onValueChange={(value) => setMarks(value[0])}
              className="py-4"
            />
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">
                Your Category
              </label>
              <Select
                value={categoryId}
                onValueChange={setCategoryId}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select category" />
                </SelectTrigger>
                <SelectContent>
                  {/* Add an empty value option with a valid identifier */}
                  <SelectItem value="0">All Categories</SelectItem>
                  {categories?.map((category) => (
                    <SelectItem key={category.id} value={category.id.toString()}>
                      {category.name} ({category.code})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">
                Preferred Department
              </label>
              <Select
                value={departmentId}
                onValueChange={setDepartmentId}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select department" />
                </SelectTrigger>
                <SelectContent>
                  {/* Add an empty value option with a valid identifier */}
                  <SelectItem value="0">All Departments</SelectItem>
                  {departments?.map((department) => (
                    <SelectItem key={department.id} value={department.id.toString()}>
                      {department.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
          
          <Button 
            type="submit" 
            className="w-full bg-primary hover:bg-primary/90 text-white"
          >
            <Search className="mr-2 h-4 w-4" /> Find Eligible Colleges
          </Button>
        </form>
      </CardContent>
      
      <CardFooter className="flex justify-center pt-0">
        <p className="text-xs text-gray-500">
          Based on TNEA cutoff data from previous years
        </p>
      </CardFooter>
    </Card>
  );
};

export default MarkEntryForm;