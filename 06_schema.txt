import { pgTable, text, serial, integer, boolean, doublePrecision } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
});

export const insertUserSchema = createInsertSchema(users).pick({
  username: true,
  password: true,
});

export type InsertUser = z.infer<typeof insertUserSchema>;
export type User = typeof users.$inferSelect;

// TNEA Cutoff Data
export const colleges = pgTable("colleges", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  code: text("code").notNull().unique(),
  location: text("location"),
  establishedYear: integer("established_year"),
  naacGrade: text("naac_grade"),
  nirfRank: integer("nirf_rank"),
  website: text("website")
});

export const insertCollegeSchema = createInsertSchema(colleges).omit({
  id: true
});

export type InsertCollege = z.infer<typeof insertCollegeSchema>;
export type College = typeof colleges.$inferSelect;

export const departments = pgTable("departments", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  code: text("code").notNull(),
  shortName: text("short_name")
});

export const insertDepartmentSchema = createInsertSchema(departments).omit({
  id: true
});

export type InsertDepartment = z.infer<typeof insertDepartmentSchema>;
export type Department = typeof departments.$inferSelect;

export const categories = pgTable("categories", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  code: text("code").notNull().unique(),
  description: text("description")
});

export const insertCategorySchema = createInsertSchema(categories).omit({
  id: true
});

export type InsertCategory = z.infer<typeof insertCategorySchema>;
export type Category = typeof categories.$inferSelect;

export const cutoffs = pgTable("cutoffs", {
  id: serial("id").primaryKey(),
  collegeId: integer("college_id").notNull(),
  departmentId: integer("department_id").notNull(),
  categoryId: integer("category_id").notNull(),
  year: integer("year").notNull(),
  cutoffMark: doublePrecision("cutoff_mark").notNull()
});

export const insertCutoffSchema = createInsertSchema(cutoffs).omit({
  id: true
});

export type InsertCutoff = z.infer<typeof insertCutoffSchema>;
export type Cutoff = typeof cutoffs.$inferSelect;

// Enhanced schemas for returning joined data
export const cutoffWithDetailsSchema = z.object({
  id: z.number(),
  collegeId: z.number(),
  collegeName: z.string(),
  collegeCode: z.string(),
  departmentId: z.number(),
  departmentName: z.string(),
  departmentCode: z.string(),
  categoryId: z.number(),
  categoryName: z.string(),
  categoryCode: z.string(),
  year: z.number(),
  cutoffMark: z.number()
});

export type CutoffWithDetails = z.infer<typeof cutoffWithDetailsSchema>;

// Schema for Excel upload data
export const excelUploadSchema = z.object({
  year: z.number().min(2000).max(2100),
  dataType: z.enum(["official", "predicted", "historic"])
});

export type ExcelUpload = z.infer<typeof excelUploadSchema>;
